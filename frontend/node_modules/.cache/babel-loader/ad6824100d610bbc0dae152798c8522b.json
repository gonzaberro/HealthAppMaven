{"ast":null,"code":"var _jsxFileName = \"/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/components/Logged/FormsABM/TipoServicio/TipoServicioForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { url_servidor } from \"Utils/constants\";\nimport { getListaTipoServicios, setTipoServicio } from \"actions/TipoServicioActions\";\nexport default function TipoServicioForm() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [nombre, setNombre] = useState(\"\");\n  const [cdTipoServicio, setCdTipoServicio] = useState(0);\n  const tipoServicio = useSelector(state => state.tipoServicio.tipoServicio);\n\n  const guardarTipoServicio = () => {\n    if (nombre !== \"\" && cdTipoServicio !== \"\") {\n      fetch(url_servidor + \"tipoServicio\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          cdTipoServicio: cdTipoServicio,\n          nombre: nombre\n        })\n      }).then(function (response) {\n        if (response.status === 200) {\n          enqueueSnackbar(\"Se guardÃ³ el Tipo de Servicio\", {\n            variant: \"success\"\n          });\n          dispatch(getListaTipoServicios());\n        } else {\n          enqueueSnackbar(\"Error al guardar el Tipo de Servicio\", {\n            variant: \"error\"\n          });\n        }\n      });\n    } else {\n      enqueueSnackbar(\"No puede dejar el nombre en blanco\", {\n        variant: \"warning\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    setCdTipoServicio(tipoServicio.cd_tipo_servicio);\n    setNombre(tipoServicio.nombre);\n  }, [tipoServicio]);\n\n  const nuevoTipoServicio = () => {\n    dispatch(setTipoServicio({\n      cd_tipo_servicio: 0,\n      nombre: \"\"\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 10,\n    xs: 8,\n    md: 8,\n    sm: 8,\n    className: classes.headerForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Crear/Editar Especialidad\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 2,\n    xs: 4,\n    md: 4,\n    sm: 4,\n    className: classes.buttonForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"default\",\n    onClick: nuevoTipoServicio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Nueva\"))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.gridForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 12,\n    sm: 12,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    label: \"Servicio\",\n    fullWidth: true,\n    value: nombre,\n    onChange: event => setNombre(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: guardarTipoServicio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Guardar\"))));\n}\nconst useStyles = makeStyles(theme => ({\n  headerForm: {\n    textAlign: \"center\",\n    paddingTop: 20\n  },\n  buttonForm: {\n    paddingTop: 10\n  },\n  gridForm: {\n    padding: 10\n  }\n}));","map":{"version":3,"sources":["/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/components/Logged/FormsABM/TipoServicio/TipoServicioForm.jsx"],"names":["React","useState","useEffect","makeStyles","Grid","TextField","Button","useSelector","useDispatch","useSnackbar","url_servidor","getListaTipoServicios","setTipoServicio","TipoServicioForm","classes","useStyles","dispatch","enqueueSnackbar","nombre","setNombre","cdTipoServicio","setCdTipoServicio","tipoServicio","state","guardarTipoServicio","fetch","method","headers","body","JSON","stringify","then","response","status","variant","cd_tipo_servicio","nuevoTipoServicio","headerForm","buttonForm","gridForm","event","target","value","theme","textAlign","paddingTop","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { url_servidor } from \"Utils/constants\";\nimport {\n  getListaTipoServicios,\n  setTipoServicio,\n} from \"actions/TipoServicioActions\";\n\nexport default function TipoServicioForm() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [nombre, setNombre] = useState(\"\");\n  const [cdTipoServicio, setCdTipoServicio] = useState(0);\n  const tipoServicio = useSelector((state) => state.tipoServicio.tipoServicio);\n\n  const guardarTipoServicio = () => {\n    if (nombre !== \"\" && cdTipoServicio !== \"\") {\n      fetch(url_servidor + \"tipoServicio\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          cdTipoServicio: cdTipoServicio,\n          nombre: nombre,\n        }),\n      }).then(function (response) {\n        if (response.status === 200) {\n          enqueueSnackbar(\"Se guardÃ³ el Tipo de Servicio\", {\n            variant: \"success\",\n          });\n          dispatch(getListaTipoServicios());\n        } else {\n          enqueueSnackbar(\"Error al guardar el Tipo de Servicio\", {\n            variant: \"error\",\n          });\n        }\n      });\n    } else {\n      enqueueSnackbar(\"No puede dejar el nombre en blanco\", {\n        variant: \"warning\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setCdTipoServicio(tipoServicio.cd_tipo_servicio);\n    setNombre(tipoServicio.nombre);\n  }, [tipoServicio]);\n\n  const nuevoTipoServicio = () => {\n    dispatch(\n      setTipoServicio({\n        cd_tipo_servicio: 0,\n        nombre: \"\",\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item lg={10} xs={8} md={8} sm={8} className={classes.headerForm}>\n          Crear/Editar Especialidad\n        </Grid>\n        <Grid item lg={2} xs={4} md={4} sm={4} className={classes.buttonForm}>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            onClick={nuevoTipoServicio}\n          >\n            Nueva\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid container className={classes.gridForm}>\n        <Grid item xs={12} md={12} sm={12} lg={12}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            label={\"Servicio\"}\n            fullWidth\n            value={nombre}\n            onChange={(event) => setNombre(event.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={guardarTipoServicio}\n          >\n            Guardar\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\nconst useStyles = makeStyles((theme) => ({\n  headerForm: {\n    textAlign: \"center\",\n    paddingTop: 20,\n  },\n  buttonForm: {\n    paddingTop: 10,\n  },\n  gridForm: {\n    padding: 10,\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}