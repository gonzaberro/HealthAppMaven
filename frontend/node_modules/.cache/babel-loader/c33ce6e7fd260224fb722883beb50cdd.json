{"ast":null,"code":"var _jsxFileName = \"/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/components/Logged/Agenda Semanal/AgendaSemanalHeader.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Button from \"@material-ui/core/Button\";\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport FilterDoctorAgenda from \"../Agenda/FilterDoctorAgenda\";\nimport { setFechaAgenda } from \"../../../actions/AgendaActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nexport default function AgendaSemanalHeader() {\n  const fechaCalendario = useSelector(state => state.agenda_reducer.fecha_agenda);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const getMonday = useCallback(() => {\n    let dia = fechaCalendario;\n    let day = dia.getDay(),\n        diff = dia.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n\n    return new Date(dia.setDate(diff));\n  }, [fechaCalendario]);\n  const [inicioSemana, setInicioSemana] = useState(getMonday());\n  useEffect(() => {\n    setInicioSemana(getMonday());\n  }, [fechaCalendario, getMonday]);\n\n  const downFecha = () => {\n    const anterior_lunes = inicioSemana;\n    anterior_lunes.setDate(anterior_lunes.getDate() - 7);\n    dispatch(setFechaAgenda(anterior_lunes));\n  };\n\n  const upFecha = () => {\n    const siguiente_lunes = inicioSemana;\n    siguiente_lunes.setDate(siguiente_lunes.getDate() + 7);\n    dispatch(setFechaAgenda(siguiente_lunes));\n  };\n\n  const setDateToday = () => {\n    dispatch(setFechaAgenda(new Date()));\n  };\n\n  const fechaString = () => {\n    const dia_lunes = inicioSemana.getDate();\n    const mo = new Intl.DateTimeFormat(\"es\", {\n      month: \"long\"\n    }).format(inicioSemana);\n    const fecha_sabado = inicioSemana;\n    fecha_sabado.setDate(fecha_sabado.getDate() + 5);\n    const mo_sabado = new Intl.DateTimeFormat(\"es\", {\n      month: \"long\"\n    }).format(fecha_sabado);\n    let fecha = fecha_sabado.getDate() < dia_lunes ? dia_lunes + \" de \" + mo.toUpperCase() + \" - \" + fecha_sabado.getDate() + \" de \" + mo_sabado.toUpperCase() : dia_lunes + \" de \" + mo.toUpperCase() + \" - \" + fecha_sabado.getDate() + \" de \" + mo.toUpperCase();\n    return fecha;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    style: {\n      height: \"5%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 1,\n    xs: 12,\n    className: classes.arrowAgenda,\n    onClick: downFecha,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    style: {\n      color: \"#db3d44\"\n    },\n    icon: faChevronLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 1,\n    xs: 2,\n    className: classes.gridButtonHoy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: setDateToday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Hoy\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 3,\n    xs: 5,\n    className: classes.fechaAgenda,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, fechaString()), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 5,\n    className: classes.gridFilterDoctor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FilterDoctorAgenda, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 1,\n    xs: 12,\n    className: classes.arrowAgenda,\n    onClick: upFecha,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    style: {\n      color: \"#db3d44\"\n    },\n    icon: faChevronRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }))));\n}\nconst useStyles = makeStyles(theme => ({\n  arrowAgenda: {\n    borderBottom: \"1px solid #ccc\",\n    borderTop: \"1px solid #ccc\",\n    padding: \"2%\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      backgroundColor: \"#efefef\"\n    }\n  },\n  gridFilterDoctor: {\n    paddingTop: \"1%\",\n    borderTop: \"1px solid #ccc\",\n    borderBottom: \"1px solid #ccc\",\n    paddingRight: 10,\n    textAlign: \"center\"\n  },\n  gridButtonHoy: {\n    paddingTop: \"1%\",\n    borderTop: \"1px solid #ccc\",\n    borderBottom: \"1px solid #ccc\",\n    textAlign: \"center\"\n  },\n  fechaAgenda: {\n    paddingTop: \"2%\",\n    borderBottom: \"1px solid #ccc\",\n    borderTop: \"1px solid #ccc\",\n    textAlign: \"center\",\n    color: \"#0000008a\",\n    fontWeight: \"bold\",\n    userSelect: \"none\"\n  }\n}));","map":{"version":3,"sources":["/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/components/Logged/Agenda Semanal/AgendaSemanalHeader.jsx"],"names":["React","useState","useEffect","useCallback","Grid","FontAwesomeIcon","Button","faChevronLeft","faChevronRight","FilterDoctorAgenda","setFechaAgenda","useSelector","useDispatch","makeStyles","AgendaSemanalHeader","fechaCalendario","state","agenda_reducer","fecha_agenda","classes","useStyles","dispatch","getMonday","dia","day","getDay","diff","getDate","Date","setDate","inicioSemana","setInicioSemana","downFecha","anterior_lunes","upFecha","siguiente_lunes","setDateToday","fechaString","dia_lunes","mo","Intl","DateTimeFormat","month","format","fecha_sabado","mo_sabado","fecha","toUpperCase","height","arrowAgenda","color","gridButtonHoy","fechaAgenda","gridFilterDoctor","theme","borderBottom","borderTop","padding","textAlign","cursor","backgroundColor","paddingTop","paddingRight","fontWeight","userSelect"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport FilterDoctorAgenda from \"../Agenda/FilterDoctorAgenda\";\nimport { setFechaAgenda } from \"../../../actions/AgendaActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AgendaSemanalHeader() {\n  const fechaCalendario = useSelector(\n    (state) => state.agenda_reducer.fecha_agenda\n  );\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const getMonday = useCallback(() => {\n    let dia = fechaCalendario;\n    let day = dia.getDay(),\n      diff = dia.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n\n    return new Date(dia.setDate(diff));\n  }, [fechaCalendario]);\n\n  const [inicioSemana, setInicioSemana] = useState(getMonday());\n\n  useEffect(() => {\n    setInicioSemana(getMonday());\n  }, [fechaCalendario, getMonday]);\n\n  const downFecha = () => {\n    const anterior_lunes = inicioSemana;\n    anterior_lunes.setDate(anterior_lunes.getDate() - 7);\n\n    dispatch(setFechaAgenda(anterior_lunes));\n  };\n  const upFecha = () => {\n    const siguiente_lunes = inicioSemana;\n    siguiente_lunes.setDate(siguiente_lunes.getDate() + 7);\n    dispatch(setFechaAgenda(siguiente_lunes));\n  };\n  const setDateToday = () => {\n    dispatch(setFechaAgenda(new Date()));\n  };\n\n  const fechaString = () => {\n    const dia_lunes = inicioSemana.getDate();\n\n    const mo = new Intl.DateTimeFormat(\"es\", { month: \"long\" }).format(\n      inicioSemana\n    );\n\n    const fecha_sabado = inicioSemana;\n    fecha_sabado.setDate(fecha_sabado.getDate() + 5);\n\n    const mo_sabado = new Intl.DateTimeFormat(\"es\", { month: \"long\" }).format(\n      fecha_sabado\n    );\n\n    let fecha =\n      fecha_sabado.getDate() < dia_lunes\n        ? dia_lunes +\n          \" de \" +\n          mo.toUpperCase() +\n          \" - \" +\n          fecha_sabado.getDate() +\n          \" de \" +\n          mo_sabado.toUpperCase()\n        : dia_lunes +\n          \" de \" +\n          mo.toUpperCase() +\n          \" - \" +\n          fecha_sabado.getDate() +\n          \" de \" +\n          mo.toUpperCase();\n\n    return fecha;\n  };\n\n  return (\n    <>\n      <Grid container style={{ height: \"5%\" }}>\n        <Grid\n          item\n          md={1}\n          xs={12}\n          className={classes.arrowAgenda}\n          onClick={downFecha}\n        >\n          <FontAwesomeIcon style={{ color: \"#db3d44\" }} icon={faChevronLeft} />\n        </Grid>\n        <Grid item md={1} xs={2} className={classes.gridButtonHoy}>\n          <Button variant=\"contained\" onClick={setDateToday}>\n            Hoy\n          </Button>\n        </Grid>\n        <Grid item md={3} xs={5} className={classes.fechaAgenda}>\n          {fechaString()}\n        </Grid>\n        <Grid item md={6} xs={5} className={classes.gridFilterDoctor}>\n          <FilterDoctorAgenda />\n        </Grid>\n        <Grid\n          item\n          md={1}\n          xs={12}\n          className={classes.arrowAgenda}\n          onClick={upFecha}\n        >\n          <FontAwesomeIcon style={{ color: \"#db3d44\" }} icon={faChevronRight} />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\nconst useStyles = makeStyles((theme) => ({\n  arrowAgenda: {\n    borderBottom: \"1px solid #ccc\",\n    borderTop: \"1px solid #ccc\",\n    padding: \"2%\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      backgroundColor: \"#efefef\",\n    },\n  },\n  gridFilterDoctor: {\n    paddingTop: \"1%\",\n    borderTop: \"1px solid #ccc\",\n    borderBottom: \"1px solid #ccc\",\n    paddingRight: 10,\n    textAlign: \"center\",\n  },\n  gridButtonHoy: {\n    paddingTop: \"1%\",\n    borderTop: \"1px solid #ccc\",\n    borderBottom: \"1px solid #ccc\",\n\n    textAlign: \"center\",\n  },\n  fechaAgenda: {\n    paddingTop: \"2%\",\n    borderBottom: \"1px solid #ccc\",\n    borderTop: \"1px solid #ccc\",\n    textAlign: \"center\",\n\n    color: \"#0000008a\",\n    fontWeight: \"bold\",\n    userSelect: \"none\",\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}