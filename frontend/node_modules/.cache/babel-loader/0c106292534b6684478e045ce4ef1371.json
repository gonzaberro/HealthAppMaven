{"ast":null,"code":"import { NEW_TURNO, FECHA_AGENDA, BORRAR_TURNO, SELECT_DIA_MES } from \"../actions/types\";\nconst initialState = {\n  turnos: [],\n  fecha_agenda: new Date()\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case NEW_TURNO:\n      return { ...state,\n        turnos: agregarTurnos(state.turnos, action.payload)\n      };\n\n    case FECHA_AGENDA:\n      return { ...state,\n        fecha_agenda: action.payload\n      };\n\n    case SELECT_DIA_MES:\n      return { ...state,\n        fecha_agenda: action.payload\n      };\n\n    case BORRAR_TURNO:\n      return { ...state,\n        turnos: borrarTurnos(state.turnos, action.payload)\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction borrarTurnos(listTurnos, info_turno) {\n  const foundIndexHorario = listTurnos.findIndex(horario => horario.horario === info_turno.horario);\n  let turnos_aux = listTurnos[foundIndexHorario].turnos;\n  turnos_aux.splice(info_turno.index, 1);\n  listTurnos[foundIndexHorario].turnos = turnos_aux;\n  return [...listTurnos];\n}\n\nfunction agregarTurnos(listTurnos, nuevo_turno) {\n  const foundIndexHorario = listTurnos.findIndex(horario => horario.horario === nuevo_turno.horario);\n\n  if (foundIndexHorario === -1) {\n    return [...listTurnos, {\n      horario: nuevo_turno.horario,\n      turnos: [nuevo_turno.turno]\n    }];\n  } else {\n    const foundIndexTurno = listTurnos[foundIndexHorario].turnos.findIndex(turno => turno.paciente === nuevo_turno.turno.paciente && turno.doctor === nuevo_turno.turno.doctor);\n\n    if (foundIndexTurno === -1) {\n      let turnos_aux = listTurnos[foundIndexHorario].turnos;\n      turnos_aux.push(nuevo_turno.turno);\n      listTurnos[foundIndexHorario].turnos = turnos_aux;\n      return [...listTurnos];\n    } else {\n      return [...listTurnos];\n    }\n  }\n}","map":{"version":3,"sources":["/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/reducers/AgendaReducer.js"],"names":["NEW_TURNO","FECHA_AGENDA","BORRAR_TURNO","SELECT_DIA_MES","initialState","turnos","fecha_agenda","Date","state","action","type","agregarTurnos","payload","borrarTurnos","listTurnos","info_turno","foundIndexHorario","findIndex","horario","turnos_aux","splice","index","nuevo_turno","turno","foundIndexTurno","paciente","doctor","push"],"mappings":"AAAA,SACEA,SADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,kBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE,IAAIC,IAAJ;AAFK,CAArB;AAKA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,SAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,MAAM,EAAEM,aAAa,CAACH,KAAK,CAACH,MAAP,EAAeI,MAAM,CAACG,OAAtB;AAFhB,OAAP;;AAKF,SAAKX,YAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAFhB,OAAP;;AAKF,SAAKT,cAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAFhB,OAAP;;AAKF,SAAKV,YAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,MAAM,EAAEQ,YAAY,CAACL,KAAK,CAACH,MAAP,EAAeI,MAAM,CAACG,OAAtB;AAFf,OAAP;;AAKF;AACE,aAAOJ,KAAP;AA1BJ;AA4BD;;AAED,SAASK,YAAT,CAAsBC,UAAtB,EAAkCC,UAAlC,EAA8C;AAC5C,QAAMC,iBAAiB,GAAGF,UAAU,CAACG,SAAX,CACvBC,OAAD,IAAaA,OAAO,CAACA,OAAR,KAAoBH,UAAU,CAACG,OADpB,CAA1B;AAIA,MAAIC,UAAU,GAAGL,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA/C;AAEAc,EAAAA,UAAU,CAACC,MAAX,CAAkBL,UAAU,CAACM,KAA7B,EAAoC,CAApC;AACAP,EAAAA,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,GAAuCc,UAAvC;AAEA,SAAO,CAAC,GAAGL,UAAJ,CAAP;AACD;;AAED,SAASH,aAAT,CAAuBG,UAAvB,EAAmCQ,WAAnC,EAAgD;AAC9C,QAAMN,iBAAiB,GAAGF,UAAU,CAACG,SAAX,CACvBC,OAAD,IAAaA,OAAO,CAACA,OAAR,KAAoBI,WAAW,CAACJ,OADrB,CAA1B;;AAIA,MAAIF,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC5B,WAAO,CACL,GAAGF,UADE,EAEL;AAAEI,MAAAA,OAAO,EAAEI,WAAW,CAACJ,OAAvB;AAAgCb,MAAAA,MAAM,EAAE,CAACiB,WAAW,CAACC,KAAb;AAAxC,KAFK,CAAP;AAID,GALD,MAKO;AACL,UAAMC,eAAe,GAAGV,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,CAAqCY,SAArC,CACrBM,KAAD,IACEA,KAAK,CAACE,QAAN,KAAmBH,WAAW,CAACC,KAAZ,CAAkBE,QAArC,IACAF,KAAK,CAACG,MAAN,KAAiBJ,WAAW,CAACC,KAAZ,CAAkBG,MAHf,CAAxB;;AAMA,QAAIF,eAAe,KAAK,CAAC,CAAzB,EAA4B;AAC1B,UAAIL,UAAU,GAAGL,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA/C;AACAc,MAAAA,UAAU,CAACQ,IAAX,CAAgBL,WAAW,CAACC,KAA5B;AACAT,MAAAA,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,GAAuCc,UAAvC;AAEA,aAAO,CAAC,GAAGL,UAAJ,CAAP;AACD,KAND,MAMO;AACL,aAAO,CAAC,GAAGA,UAAJ,CAAP;AACD;AACF;AACF","sourcesContent":["import {\n  NEW_TURNO,\n  FECHA_AGENDA,\n  BORRAR_TURNO,\n  SELECT_DIA_MES,\n} from \"../actions/types\";\n\nconst initialState = {\n  turnos: [],\n  fecha_agenda: new Date(),\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case NEW_TURNO:\n      return {\n        ...state,\n        turnos: agregarTurnos(state.turnos, action.payload),\n      };\n\n    case FECHA_AGENDA:\n      return {\n        ...state,\n        fecha_agenda: action.payload,\n      };\n\n    case SELECT_DIA_MES:\n      return {\n        ...state,\n        fecha_agenda: action.payload,\n      };\n\n    case BORRAR_TURNO:\n      return {\n        ...state,\n        turnos: borrarTurnos(state.turnos, action.payload),\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction borrarTurnos(listTurnos, info_turno) {\n  const foundIndexHorario = listTurnos.findIndex(\n    (horario) => horario.horario === info_turno.horario\n  );\n\n  let turnos_aux = listTurnos[foundIndexHorario].turnos;\n\n  turnos_aux.splice(info_turno.index, 1);\n  listTurnos[foundIndexHorario].turnos = turnos_aux;\n\n  return [...listTurnos];\n}\n\nfunction agregarTurnos(listTurnos, nuevo_turno) {\n  const foundIndexHorario = listTurnos.findIndex(\n    (horario) => horario.horario === nuevo_turno.horario\n  );\n\n  if (foundIndexHorario === -1) {\n    return [\n      ...listTurnos,\n      { horario: nuevo_turno.horario, turnos: [nuevo_turno.turno] },\n    ];\n  } else {\n    const foundIndexTurno = listTurnos[foundIndexHorario].turnos.findIndex(\n      (turno) =>\n        turno.paciente === nuevo_turno.turno.paciente &&\n        turno.doctor === nuevo_turno.turno.doctor\n    );\n\n    if (foundIndexTurno === -1) {\n      let turnos_aux = listTurnos[foundIndexHorario].turnos;\n      turnos_aux.push(nuevo_turno.turno);\n      listTurnos[foundIndexHorario].turnos = turnos_aux;\n\n      return [...listTurnos];\n    } else {\n      return [...listTurnos];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}