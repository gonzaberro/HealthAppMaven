{"ast":null,"code":"import React from\"react\";import Grid from\"@material-ui/core/Grid\";import{Badge}from\"@material-ui/core\";import{makeStyles}from\"@material-ui/core/styles\";import{setDiaMesSeleccionado}from\"actions/AgendaActions\";import{useSelector,useDispatch}from\"react-redux\";import{menuOptions}from\"Utils/constants\";import{SWITCH_MENU}from\"actions/types\";import TurnosDiaAgendaSemanal from\"./TurnosDiaAgendaSemanal\";export default function AgendaSemanalDias(){var fechaCalendario=useSelector(function(state){return state.agenda_reducer.fecha_agenda;});var classes=useStyles();var dispatch=useDispatch();var gotoDiaCalendario=function gotoDiaCalendario(fecha_seleccionada){var ye=new Intl.DateTimeFormat(\"es\",{year:\"numeric\"}).format(fecha_seleccionada);//Anio en formato YYYY de la fecha que seleccione\nvar mo=new Intl.DateTimeFormat(\"es\",{month:\"2-digit\"}).format(fecha_seleccionada);//MES en formato MM de la fecha que seleccione\ndispatch(setDiaMesSeleccionado(new Date(ye,mo-1,fecha_seleccionada.getDate())));//Seteo la fecha del calendario con la fecha que seleccione\ndispatch({type:SWITCH_MENU,payload:menuOptions.Agenda_DIARIA});//Voy a ver la visual del calendario por DIA*/\n};var getMonday=function getMonday(){var dia=fechaCalendario;var day=dia.getDay(),diff=dia.getDate()-day+(day==0?-6:1);// adjust when day is sunday\nreturn new Date(dia.setDate(diff));};var renderDiasCalendario=function renderDiasCalendario(){var fecha_semana=getMonday();//Obtengo la fecha del lunes anterior\nvar mo=fecha_semana.getMonth();var ye=new Intl.DateTimeFormat(\"es\",{year:\"numeric\"}).format(fecha_semana);//Anio en formato YYYY de la fecha que seleccione\nvar dias_calendario=[];//RETURN DEL CALENDARIO\nfor(var dias=1;dias<=6;dias++){if(fecha_semana.getDay()>0//Me aseguro que el dia no sea domingo\n){(function(){var badge_fecha=new Date(fecha_semana);//Lo necesito para poder saber el dia cuando hago click sobre la fecha\ndias_calendario.push(/*#__PURE__*/React.createElement(Grid,{item:true,key:\"grid_\"+dias,md:2,xs:12,className:classes.gridDias,onClick:function onClick(){return gotoDiaCalendario(badge_fecha);}},/*#__PURE__*/React.createElement(Grid,{container:true,key:\"badge_container_\"+dias},/*#__PURE__*/React.createElement(Grid,{item:true,md:1,xs:1,key:\"grid_nro_dia_\"+dias},/*#__PURE__*/React.createElement(Badge,{color:\"primary\",key:\"badge_nro_dia_\"+dias,badgeContent:badge_fecha.getDate(),showZero:true})),/*#__PURE__*/React.createElement(Grid,{item:true,md:11,xs:11,key:\"grid_nro_turnos_\"+dias,style:{marginTop:5},className:classes.gridTurnosDia},/*#__PURE__*/React.createElement(TurnosDiaAgendaSemanal,{key:\"turnos_dia_semanal_\"+dias,dia_mes:badge_fecha.getDate(),mes_calendario:badge_fecha.getMonth()+1})))));})();}fecha_semana.setDate(fecha_semana.getDate()+1);}return dias_calendario;};return/*#__PURE__*/React.createElement(\"div\",{style:{height:\"100%\"}},/*#__PURE__*/React.createElement(Grid,{container:true},renderDiasCalendario()));}var useStyles=makeStyles(function(theme){return{gridDias:{border:\"1px solid #eeeeee\",padding:10,paddingLeft:15,borderLeft:\"1px solid #eeeeee\",minHeight:\"85vh\",\"&:hover\":{border:\"1px solid #2c41b5\",backgroundColor:\"#eeeeee\",color:theme.palette.primary.main,cursor:\"pointer\"}},gridTurnosDia:{maxHeight:\"85vh\",overflowY:\"auto\"}};});","map":{"version":3,"sources":["/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/components/Logged/Agenda Semanal/AgendaSemanalDias.jsx"],"names":["React","Grid","Badge","makeStyles","setDiaMesSeleccionado","useSelector","useDispatch","menuOptions","SWITCH_MENU","TurnosDiaAgendaSemanal","AgendaSemanalDias","fechaCalendario","state","agenda_reducer","fecha_agenda","classes","useStyles","dispatch","gotoDiaCalendario","fecha_seleccionada","ye","Intl","DateTimeFormat","year","format","mo","month","Date","getDate","type","payload","Agenda_DIARIA","getMonday","dia","day","getDay","diff","setDate","renderDiasCalendario","fecha_semana","getMonth","dias_calendario","dias","badge_fecha","push","gridDias","marginTop","gridTurnosDia","height","theme","border","padding","paddingLeft","borderLeft","minHeight","backgroundColor","color","palette","primary","main","cursor","maxHeight","overflowY"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Badge } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { setDiaMesSeleccionado } from \"actions/AgendaActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { menuOptions } from \"Utils/constants\";\nimport { SWITCH_MENU } from \"actions/types\";\nimport TurnosDiaAgendaSemanal from \"./TurnosDiaAgendaSemanal\";\nexport default function AgendaSemanalDias() {\n  const fechaCalendario = useSelector(\n    (state) => state.agenda_reducer.fecha_agenda\n  );\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const gotoDiaCalendario = (fecha_seleccionada) => {\n    const ye = new Intl.DateTimeFormat(\"es\", { year: \"numeric\" }).format(\n      fecha_seleccionada\n    ); //Anio en formato YYYY de la fecha que seleccione\n    const mo = new Intl.DateTimeFormat(\"es\", { month: \"2-digit\" }).format(\n      fecha_seleccionada\n    ); //MES en formato MM de la fecha que seleccione\n\n    dispatch(\n      setDiaMesSeleccionado(new Date(ye, mo - 1, fecha_seleccionada.getDate()))\n    ); //Seteo la fecha del calendario con la fecha que seleccione\n    dispatch({ type: SWITCH_MENU, payload: menuOptions.Agenda_DIARIA }); //Voy a ver la visual del calendario por DIA*/\n  };\n  const getMonday = () => {\n    let dia = fechaCalendario;\n    var day = dia.getDay(),\n      diff = dia.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday\n\n    return new Date(dia.setDate(diff));\n  };\n  const renderDiasCalendario = () => {\n    let fecha_semana = getMonday(); //Obtengo la fecha del lunes anterior\n    let mo = fecha_semana.getMonth();\n    const ye = new Intl.DateTimeFormat(\"es\", { year: \"numeric\" }).format(\n      fecha_semana\n    ); //Anio en formato YYYY de la fecha que seleccione\n\n    let dias_calendario = []; //RETURN DEL CALENDARIO\n\n    for (let dias = 1; dias <= 6; dias++) {\n      if (\n        fecha_semana.getDay() > 0 //Me aseguro que el dia no sea domingo\n      ) {\n        let badge_fecha = new Date(fecha_semana); //Lo necesito para poder saber el dia cuando hago click sobre la fecha\n        dias_calendario.push(\n          <Grid\n            item\n            key={\"grid_\" + dias}\n            md={2}\n            xs={12}\n            className={classes.gridDias}\n            onClick={() => gotoDiaCalendario(badge_fecha)}\n          >\n            <Grid container key={\"badge_container_\" + dias}>\n              <Grid item md={1} xs={1} key={\"grid_nro_dia_\" + dias}>\n                <Badge\n                  color=\"primary\"\n                  key={\"badge_nro_dia_\" + dias}\n                  badgeContent={badge_fecha.getDate()}\n                  showZero\n                ></Badge>\n              </Grid>\n              <Grid\n                item\n                md={11}\n                xs={11}\n                key={\"grid_nro_turnos_\" + dias}\n                style={{ marginTop: 5 }}\n                className={classes.gridTurnosDia}\n              >\n                <TurnosDiaAgendaSemanal\n                  key={\"turnos_dia_semanal_\" + dias}\n                  dia_mes={badge_fecha.getDate()}\n                  mes_calendario={badge_fecha.getMonth() + 1}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        );\n      }\n      fecha_semana.setDate(fecha_semana.getDate() + 1);\n    }\n\n    return dias_calendario;\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <Grid container>{renderDiasCalendario()}</Grid>\n    </div>\n  );\n}\nconst useStyles = makeStyles((theme) => ({\n  gridDias: {\n    border: \"1px solid #eeeeee\",\n    padding: 10,\n    paddingLeft: 15,\n    borderLeft: \"1px solid #eeeeee\",\n    minHeight: \"85vh\",\n    \"&:hover\": {\n      border: \"1px solid #2c41b5\",\n      backgroundColor: \"#eeeeee\",\n      color: theme.palette.primary.main,\n      cursor: \"pointer\",\n    },\n  },\n  gridTurnosDia: {\n    maxHeight: \"85vh\",\n    overflowY: \"auto\",\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}