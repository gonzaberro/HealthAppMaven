{"ast":null,"code":"import _toConsumableArray from\"/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{NEW_TURNO,FECHA_AGENDA,BORRAR_TURNO,SELECT_DIA_MES}from\"../actions/types\";var initialState={turnos:[],fecha_agenda:new Date()};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case NEW_TURNO:return _objectSpread(_objectSpread({},state),{},{turnos:agregarTurnos(state.turnos,action.payload)});case FECHA_AGENDA:return _objectSpread(_objectSpread({},state),{},{fecha_agenda:action.payload});case SELECT_DIA_MES:return _objectSpread(_objectSpread({},state),{},{fecha_agenda:action.payload});case BORRAR_TURNO:return _objectSpread(_objectSpread({},state),{},{turnos:borrarTurnos(state.turnos,action.payload)});default:return state;}}function borrarTurnos(listTurnos,info_turno){var foundIndexHorario=listTurnos.findIndex(function(horario){return horario.horario===info_turno.horario;});var turnos_aux=listTurnos[foundIndexHorario].turnos;turnos_aux.splice(info_turno.index,1);listTurnos[foundIndexHorario].turnos=turnos_aux;return _toConsumableArray(listTurnos);}function agregarTurnos(listTurnos,nuevo_turno){var foundIndexHorario=listTurnos.findIndex(function(horario){return horario.horario===nuevo_turno.horario;});if(foundIndexHorario===-1){return[].concat(_toConsumableArray(listTurnos),[{horario:nuevo_turno.horario,turnos:[nuevo_turno.turno]}]);}else{var foundIndexTurno=listTurnos[foundIndexHorario].turnos.findIndex(function(turno){return turno.paciente===nuevo_turno.turno.paciente&&turno.doctor===nuevo_turno.turno.doctor;});if(foundIndexTurno===-1){var turnos_aux=listTurnos[foundIndexHorario].turnos;turnos_aux.push(nuevo_turno.turno);listTurnos[foundIndexHorario].turnos=turnos_aux;return _toConsumableArray(listTurnos);}else{return _toConsumableArray(listTurnos);}}}","map":{"version":3,"sources":["/Users/gonzaloberro/Documents/React Project/HealthAppWar/frontend/src/reducers/AgendaReducer.js"],"names":["NEW_TURNO","FECHA_AGENDA","BORRAR_TURNO","SELECT_DIA_MES","initialState","turnos","fecha_agenda","Date","state","action","type","agregarTurnos","payload","borrarTurnos","listTurnos","info_turno","foundIndexHorario","findIndex","horario","turnos_aux","splice","index","nuevo_turno","turno","foundIndexTurno","paciente","doctor","push"],"mappings":"uXAAA,OACEA,SADF,CAEEC,YAFF,CAGEC,YAHF,CAIEC,cAJF,KAKO,kBALP,CAOA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,MAAM,CAAE,EADW,CAEnBC,YAAY,CAAE,GAAIC,CAAAA,IAAJ,EAFK,CAArB,CAKA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBJ,YAAsB,IAARK,CAAAA,MAAQ,2CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKV,CAAAA,SAAL,CACE,sCACKQ,KADL,MAEEH,MAAM,CAAEM,aAAa,CAACH,KAAK,CAACH,MAAP,CAAeI,MAAM,CAACG,OAAtB,CAFvB,GAKF,IAAKX,CAAAA,YAAL,CACE,sCACKO,KADL,MAEEF,YAAY,CAAEG,MAAM,CAACG,OAFvB,GAKF,IAAKT,CAAAA,cAAL,CACE,sCACKK,KADL,MAEEF,YAAY,CAAEG,MAAM,CAACG,OAFvB,GAKF,IAAKV,CAAAA,YAAL,CACE,sCACKM,KADL,MAEEH,MAAM,CAAEQ,YAAY,CAACL,KAAK,CAACH,MAAP,CAAeI,MAAM,CAACG,OAAtB,CAFtB,GAKF,QACE,MAAOJ,CAAAA,KAAP,CA1BJ,CA4BD,CAED,QAASK,CAAAA,YAAT,CAAsBC,UAAtB,CAAkCC,UAAlC,CAA8C,CAC5C,GAAMC,CAAAA,iBAAiB,CAAGF,UAAU,CAACG,SAAX,CACxB,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACA,OAAR,GAAoBH,UAAU,CAACG,OAA5C,EADwB,CAA1B,CAIA,GAAIC,CAAAA,UAAU,CAAGL,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA/C,CAEAc,UAAU,CAACC,MAAX,CAAkBL,UAAU,CAACM,KAA7B,CAAoC,CAApC,EACAP,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,CAAuCc,UAAvC,CAEA,0BAAWL,UAAX,EACD,CAED,QAASH,CAAAA,aAAT,CAAuBG,UAAvB,CAAmCQ,WAAnC,CAAgD,CAC9C,GAAMN,CAAAA,iBAAiB,CAAGF,UAAU,CAACG,SAAX,CACxB,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACA,OAAR,GAAoBI,WAAW,CAACJ,OAA7C,EADwB,CAA1B,CAIA,GAAIF,iBAAiB,GAAK,CAAC,CAA3B,CAA8B,CAC5B,mCACKF,UADL,GAEE,CAAEI,OAAO,CAAEI,WAAW,CAACJ,OAAvB,CAAgCb,MAAM,CAAE,CAACiB,WAAW,CAACC,KAAb,CAAxC,CAFF,GAID,CALD,IAKO,CACL,GAAMC,CAAAA,eAAe,CAAGV,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,CAAqCY,SAArC,CACtB,SAACM,KAAD,QACEA,CAAAA,KAAK,CAACE,QAAN,GAAmBH,WAAW,CAACC,KAAZ,CAAkBE,QAArC,EACAF,KAAK,CAACG,MAAN,GAAiBJ,WAAW,CAACC,KAAZ,CAAkBG,MAFrC,EADsB,CAAxB,CAMA,GAAIF,eAAe,GAAK,CAAC,CAAzB,CAA4B,CAC1B,GAAIL,CAAAA,UAAU,CAAGL,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA/C,CACAc,UAAU,CAACQ,IAAX,CAAgBL,WAAW,CAACC,KAA5B,EACAT,UAAU,CAACE,iBAAD,CAAV,CAA8BX,MAA9B,CAAuCc,UAAvC,CAEA,0BAAWL,UAAX,EACD,CAND,IAMO,CACL,0BAAWA,UAAX,EACD,CACF,CACF","sourcesContent":["import {\n  NEW_TURNO,\n  FECHA_AGENDA,\n  BORRAR_TURNO,\n  SELECT_DIA_MES,\n} from \"../actions/types\";\n\nconst initialState = {\n  turnos: [],\n  fecha_agenda: new Date(),\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case NEW_TURNO:\n      return {\n        ...state,\n        turnos: agregarTurnos(state.turnos, action.payload),\n      };\n\n    case FECHA_AGENDA:\n      return {\n        ...state,\n        fecha_agenda: action.payload,\n      };\n\n    case SELECT_DIA_MES:\n      return {\n        ...state,\n        fecha_agenda: action.payload,\n      };\n\n    case BORRAR_TURNO:\n      return {\n        ...state,\n        turnos: borrarTurnos(state.turnos, action.payload),\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction borrarTurnos(listTurnos, info_turno) {\n  const foundIndexHorario = listTurnos.findIndex(\n    (horario) => horario.horario === info_turno.horario\n  );\n\n  let turnos_aux = listTurnos[foundIndexHorario].turnos;\n\n  turnos_aux.splice(info_turno.index, 1);\n  listTurnos[foundIndexHorario].turnos = turnos_aux;\n\n  return [...listTurnos];\n}\n\nfunction agregarTurnos(listTurnos, nuevo_turno) {\n  const foundIndexHorario = listTurnos.findIndex(\n    (horario) => horario.horario === nuevo_turno.horario\n  );\n\n  if (foundIndexHorario === -1) {\n    return [\n      ...listTurnos,\n      { horario: nuevo_turno.horario, turnos: [nuevo_turno.turno] },\n    ];\n  } else {\n    const foundIndexTurno = listTurnos[foundIndexHorario].turnos.findIndex(\n      (turno) =>\n        turno.paciente === nuevo_turno.turno.paciente &&\n        turno.doctor === nuevo_turno.turno.doctor\n    );\n\n    if (foundIndexTurno === -1) {\n      let turnos_aux = listTurnos[foundIndexHorario].turnos;\n      turnos_aux.push(nuevo_turno.turno);\n      listTurnos[foundIndexHorario].turnos = turnos_aux;\n\n      return [...listTurnos];\n    } else {\n      return [...listTurnos];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}